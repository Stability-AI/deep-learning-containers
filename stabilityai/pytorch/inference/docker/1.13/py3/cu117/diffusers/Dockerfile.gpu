ARG PYTHON=python3
ARG PYTHON_VERSION=3.9.13
ARG MICROMAMBA_VERSION=1.4.3-0
ARG OPEN_MPI_VERSION=4.1.4

# PyTorch Binaries and versions.
ARG TORCH_URL=https://aws-pytorch-unified-cicd-binaries.s3.us-west-2.amazonaws.com/r1.13.1_ec2/20221219-193736/54406b8eed7fbd61be629cb06229dfb7b6b2954e/torch-1.13.1%2Bcu117-cp39-cp39-linux_x86_64.whl
ARG TORCHVISION_VERSION=0.14.1+cu117
ARG TORCHSERVE_VERSION=0.7.1
ARG SM_TOOLKIT_VERSION=2.0.14

ARG TRANSFORMERS_VERSION=4.26.1
ARG ACCELERATE_VERSION=0.20.3
ARG STABILITY_SDK_VERSION=0.8.1
ARG MODEL_FRAMEWORK=diffusers
ARG MODEL_FRAMEWORK_VERSION=0.14.0

FROM nvidia/cuda:11.7.1-base-ubuntu20.04 AS base_image

ENV DEBIAN_FRONTEND=noninteractive \
    LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/lib"

FROM base_image AS ec2

LABEL maintainer="Stability AI"
LABEL dlc_major_version="1"

ARG PYTHON
ARG PYTHON_VERSION
ARG MICROMAMBA_VERSION
ARG OPEN_MPI_VERSION

# PyTorch Passed arguments (URLs and Versions)
ARG TORCH_URL
ARG TORCHVISION_VERSION
ARG TORCHSERVE_VERSION

# Set Debian interaction
ARG DEBIAN_FRONTEND=noninteractive

# See http://bugs.python.org/issue19846
ENV LANG C.UTF-8
ENV LD_LIBRARY_PATH="/opt/conda/lib:${LD_LIBRARY_PATH}"
ENV PATH /opt/conda/bin:$PATH
ENV TEMP=/home/model-server/tmp
# Set MKL_THREADING_LAYER=GNU to prevent issues between torch and numpy/mkl
ENV MKL_THREADING_LAYER=GNU
ENV DLC_CONTAINER_TYPE=inference

## Cuda Arch List setting Options
# Kepler+Tesla = 3.7 (P2 Instances "No Longer Supported")
# Kepler = 3.5+PTX
# Maxwell+Tegra = 5.3
# Maxwell = 5.0;5.2+PTX (G3 Instances)
# Pascal = 6.0;6.1+PTX
# Volta = 7.0+PTX (P3 Instances)
# Turing = 7.5+PTX (G4 Instances)
# Ampere = 8.0;8.6+PTX (P4 and G5 Instances)
# Ada = 8.9+PTX
ENV TORCH_CUDA_ARCH_LIST="5.0 7.0+PTX 7.5+PTX 8.0"

RUN apt-get update \
 && apt-get -y upgrade \
 && apt-get install -y --no-install-recommends software-properties-common \
# && add-apt-repository ppa:openjdk-r/ppa \
 && apt-get update \
 && apt-get install -y --allow-downgrades --allow-change-held-packages --no-install-recommends \
    build-essential \
    ca-certificates \
    cmake \
    cuda-command-line-tools-11-7 \
    cuda-cudart-11-7 \
    cuda-libraries-11-7 \
    cuda-libraries-dev-11-7 \
    curl \    
    git \
    jq \
    libcufft-dev-11-7 \
    libcurand-dev-11-7 \
    libcurl4-openssl-dev \
    libcusolver-dev-11-7 \
    libcusparse-dev-11-7 \    
    libgl1-mesa-glx \
    libglib2.0-0 \
    libgomp1 \
    libibverbs-dev \
    libnuma1 \
    libnuma-dev \
    libsm6 \
    libssl1.1 \
    libssl-dev \
    libxext6 \
    libxrender-dev \
    openjdk-11-jdk \
    openssl \
    vim \
    wget \
    unzip \
    zlib1g-dev \
    openssh-client \
    openssh-server \    
 && rm -rf /var/lib/apt/lists/*

# https://github.com/docker-library/openjdk/issues/261 https://github.com/docker-library/openjdk/pull/263/files
RUN keytool -importkeystore -srckeystore /etc/ssl/certs/java/cacerts -destkeystore /etc/ssl/certs/java/cacerts.jks -deststoretype JKS -srcstorepass changeit -deststorepass changeit -noprompt; \
    mv /etc/ssl/certs/java/cacerts.jks /etc/ssl/certs/java/cacerts; \
    /var/lib/dpkg/info/ca-certificates-java.postinst configure;

RUN wget --quiet https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-${OPEN_MPI_VERSION}.tar.gz \
 && gunzip -c openmpi-${OPEN_MPI_VERSION}.tar.gz | tar xf - \
 && cd openmpi-${OPEN_MPI_VERSION} \
 && ./configure --prefix=/home/.openmpi --with-cuda \
 && make all install \
 && cd .. \
 && rm openmpi-${OPEN_MPI_VERSION}.tar.gz \
 && rm -rf openmpi-${OPEN_MPI_VERSION}

ENV PATH="$PATH:/home/.openmpi/bin"
ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/home/.openmpi/lib/"

# Allow OpenSSH to talk to containers without asking for confirmation
RUN mkdir -p /var/run/sshd \
 && cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \
 && echo "    StrictHostKeyChecking no" >> /etc/ssh/ssh_config.new \
 && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_configs \
 && rm -rf /var/lib/apt/lists/* \
 && apt-get clean

# Install CondaForge micromamba
ENV MAMBA_ROOT_PREFIX="/opt/conda"
ENV TEMP=/tmp
RUN curl -L -o /usr/local/bin/micromamba https://github.com/mamba-org/micromamba-releases/releases/download/${MICROMAMBA_VERSION}/micromamba-linux-64 \
 && chmod +x /usr/local/bin/micromamba \ 
 && micromamba install -n base -c conda-forge python=${PYTHON_VERSION} \
    conda \
    cython \
    mkl \
    mkl-include \
    parso \
    scipy \
    typing \
    h5py \
    requests \
    libgcc \
    # Below 2 are included in miniconda base, but not mamba so need to install
    conda-content-trust \
    charset-normalizer \ 
 && /usr/local/bin/micromamba -n base clean -ya
ENV TEMP=/home/model-server/tmp

# symlink pip for OS use
RUN pip install --upgrade pip --trusted-host pypi.org --trusted-host files.pythonhosted.org \
 && ln -s /opt/conda/bin/pip /usr/local/bin/pip3

WORKDIR /root

# Ensure PyTorch did not get installed from Conda due to magma-cuda117
RUN pip uninstall -y torch torchvision torchaudio torchdata model-archiver multi-model-server

# Install AWS-PyTorch, and other torch packages
RUN pip install --no-cache-dir --extra-index-url https://download.pytorch.org/whl/cu117 -U \
    boto3 \
    enum-compat==0.0.3 \
    opencv-python \
    "cryptography>3.2" \
    "ipython>=8.10.0,<9.0" \
    "awscli<2" \
    ${TORCH_URL} \    
    torchvision==${TORCHVISION_VERSION} 

# Install TorchServe pypi dependencies directly from their requirements.txt file
# NOTE: This also brings in unnecessary cpu dependencies like nvgpu
# -> Numpy is higer version as required by torch
# -> PyYaml needs to be high pinned for awscli v1 (current v1 = 1.27.99)
RUN pip install --no-cache-dir -U -r https://raw.githubusercontent.com/pytorch/serve/v${TORCHSERVE_VERSION}/requirements/common.txt \
    "numpy>=1.22.2,<1.23" \
    "pyyaml>=5.4,<5.5" \
    torchserve==${TORCHSERVE_VERSION} \
    torch-model-archiver==${TORCHSERVE_VERSION}

# Stability AI arguments (URLs and Versions)
ARG TRANSFORMERS_VERSION
ARG ACCELERATE_VERSION
ARG STABILITY_SDK_VERSION
ARG MODEL_FRAMEWORK
ARG MODEL_FRAMEWORK_VERSION
ENV STABILITYAI_MODEL_FRAMEWORK=${MODEL_FRAMEWORK}

# Install packages for image generation with Stability models
RUN pip install --no-cache-dir -U \
    transformers==${TRANSFORMERS_VERSION} \
    accelerate==${ACCELERATE_VERSION} \ 
    ${MODEL_FRAMEWORK}==${MODEL_FRAMEWORK_VERSION} \    
    'stability-sdk @ git+https://github.com/stability-ai/stability-sdk@sagemaker'
#    Temporarily using development version
#    stability-sdk==${STABILITY_SDK_VERSION}

# Stability AI optimizer arguments (URLs and versions)
ARG MODEL_OPTIMIZER
ARG MODEL_OPTIMIZER_VERSION
ARG MODEL_OPTIMIZER_URL
ENV STABILITYAI_MODEL_OPTIMIZER=${MODEL_OPTIMIZER}

# Install optimization framework if supplied
RUN if [ ! -z ${MODEL_OPTIMIZER_URL} ]; then \
      pip install --no-cache-dir -U "${MODEL_OPTIMIZER_URL}"; \    
    elif [ ! -z ${MODEL_OPTIMIZER} ]; then \
      if [ ! -z ${MODEL_OPTIMIZER_VERSION} ]; then \
        pip install --no-cache-dir -U ${MODEL_OPTIMIZER}==${MODEL_OPTIMIZER_VERSION}; \
      else \
        pip install --no-cache-dir -U ${MODEL_OPTIMIZER}; \
      fi; \
    fi

# add necessary certificate for aws sdk cpp download
RUN mkdir -p /etc/pki/tls/certs && cp /etc/ssl/certs/ca-certificates.crt /etc/pki/tls/certs/ca-bundle.crt

WORKDIR /

RUN cd tmp/ \
 && rm -rf tmp*

RUN useradd -m model-server \
 && mkdir -p /home/model-server/tmp /opt/ml/model \
 && chown -R model-server /home/model-server /opt/ml/model

COPY torchserve-ec2-entrypoint.py /usr/local/bin/dockerd-entrypoint.py
COPY config.properties /home/model-server

RUN chmod +x /usr/local/bin/dockerd-entrypoint.py

COPY deep_learning_container.py /usr/local/bin/deep_learning_container.py

RUN chmod +x /usr/local/bin/deep_learning_container.py

RUN HOME_DIR=/root \
 && curl -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \
 && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \
 && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \
 && chmod +x /usr/local/bin/testOSSCompliance \
 && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \
 && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \
 && rm -rf ${HOME_DIR}/oss_compliance*

RUN curl -o /license.txt  https://aws-dlc-licenses.s3.amazonaws.com/pytorch-1.13/license.txt

# Removing the cache as it is needed for security verification
RUN rm -iRf /root/.cache

EXPOSE 8080 8081
ENTRYPOINT ["python", "/usr/local/bin/dockerd-entrypoint.py"]
CMD ["torchserve", "--start", "--ts-config", "/home/model-server/config.properties", "--model-store", "/home/model-server/"]

#################################################################
#  ____                   __  __       _
# / ___|  __ _  __ _  ___|  \/  | __ _| | _____ _ __
# \___ \ / _` |/ _` |/ _ \ |\/| |/ _` | |/ / _ \ '__|
#  ___) | (_| | (_| |  __/ |  | | (_| |   <  __/ |
# |____/ \__,_|\__, |\___|_|  |_|\__,_|_|\_\___|_|
#              |___/
#  ___                              ____           _
# |_ _|_ __ ___   __ _  __ _  ___  |  _ \ ___  ___(_)_ __   ___
#  | || '_ ` _ \ / _` |/ _` |/ _ \ | |_) / _ \/ __| | '_ \ / _ \
#  | || | | | | | (_| | (_| |  __/ |  _ <  __/ (__| | |_) |  __/
# |___|_| |_| |_|\__,_|\__, |\___| |_| \_\___|\___|_| .__/ \___|
#                      |___/                        |_|
#################################################################

FROM ec2 AS sagemaker

LABEL maintainer="Stability AI"
LABEL dlc_major_version="1"
LABEL com.amazonaws.sagemaker.capabilities.accept-bind-to-port=true

ARG PYTHON
ARG SM_TOOLKIT_VERSION

ENV SAGEMAKER_SERVING_MODULE sagemaker_pytorch_serving_container.serving:main

# Install scikit-learn and pandas
RUN conda install -y -c conda-forge \
    scikit-learn \
    pandas

RUN pip install --no-cache-dir sagemaker-pytorch-inference==${SM_TOOLKIT_VERSION}

COPY torchserve-entrypoint.py /usr/local/bin/dockerd-entrypoint.py

RUN chmod +x /usr/local/bin/dockerd-entrypoint.py

RUN HOME_DIR=/root \
 && curl -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \
 && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \
 && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \
 && chmod +x /usr/local/bin/testOSSCompliance \
 && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \
 && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \
 && rm -rf ${HOME_DIR}/oss_compliance*

# Removing the cache as it is needed for security verification
RUN rm -iRf /root/.cache

EXPOSE 8080 8081
ENTRYPOINT ["python", "/usr/local/bin/dockerd-entrypoint.py"]
CMD ["torchserve", "--start", "--ts-config", "/home/model-server/config.properties", "--model-store", "/home/model-server/"]
